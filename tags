!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Admin	admin/admin.go	/^type Admin struct {$/;"	t
Backend	backend.go	/^type Backend interface {$/;"	t
Backend	prometheus/backend.go	/^type Backend struct {$/;"	t
Backend	registry/backend.go	/^type Backend interface {$/;"	t
BackendCRUD	admin/httpserv/backendcrud.go	/^func BackendCRUD(admin *admin.Admin) h.HandlerFunc {$/;"	f
BackendFactory	registry/backend.go	/^type BackendFactory func(ds *graphx.DataSource) (graphx.Backend, error)$/;"	t
Chart	chart.go	/^type Chart struct {$/;"	t
ChartCRUD	admin/httpserv/chartcrud.go	/^func ChartCRUD(admin *admin.Admin) h.HandlerFunc {$/;"	f
ChartMap	etcd/chartmap.go	/^type ChartMap struct {$/;"	t
ChartMetric	chartmetric.go	/^type ChartMetric struct {$/;"	t
ChartName	chartsdescriptor.go	/^type ChartName string$/;"	t
ChartsDescriptor	chartsdescriptor.go	/^type ChartsDescriptor struct {$/;"	t
Config	cmd/graphx/main.go	/^type Config struct {$/;"	t
CreateChart	admin/chart.go	/^func (a *Admin) CreateChart(charts []*graphx.Chart) error {$/;"	f
CreateChart	admin/httpserv/createchart.go	/^func CreateChart(admin *admin.Admin) h.HandlerFunc {$/;"	f
CreateDataSource	admin/datasource.go	/^func (a *Admin) CreateDataSource(sources []*graphx.DataSource) error {$/;"	f
CreateDataSource	admin/httpserv/createdatasource.go	/^func CreateDataSource(admin *admin.Admin) h.HandlerFunc {$/;"	f
DSMap	etcd/dsmap.go	/^type DSMap struct {$/;"	t
DataSource	datasource.go	/^type DataSource struct {$/;"	t
DataSourceCRUD	admin/httpserv/datasourcecrud.go	/^func DataSourceCRUD(admin *admin.Admin) h.HandlerFunc {$/;"	f
DefaultPromURL	prometheus/prometheus_integration_test.go	/^	DefaultPromURL = "http:\/\/localhost:9090\/"$/;"	c
DefaultTSFormat	internal/unixtime/time_test.go	/^	DefaultTSFormat = "2006-01-02 15:04:05.999999999 -0700 MST"$/;"	c
DeleteChart	admin/chart.go	/^func (a *Admin) DeleteChart(ds *graphx.Chart) error {$/;"	f
DeleteChart	admin/httpserv/deletechart.go	/^func DeleteChart(a *admin.Admin) h.HandlerFunc {$/;"	f
DeleteDataSource	admin/datasource.go	/^func (a *Admin) DeleteDataSource(ds *graphx.DataSource) error {$/;"	f
DeleteDataSource	admin/httpserv/deletedatasource.go	/^func DeleteDataSource(a *admin.Admin) h.HandlerFunc {$/;"	f
Duration	chartsdescriptor.go	/^type Duration time.Duration$/;"	t
ErrBackendNotExist	registry/errors.go	/^type ErrBackendNotExist struct {$/;"	t
ErrDuplicateBackend	registry/errors.go	/^type ErrDuplicateBackend struct {$/;"	t
ErrMissingBackends	admin/error.go	/^type ErrMissingBackends struct {$/;"	t
ErrMissingDataSources	admin/error.go	/^type ErrMissingDataSources struct {$/;"	t
ErrNotFound	admin/error.go	/^type ErrNotFound struct {$/;"	t
ErrNotFound	etcd/error.go	/^type ErrNotFound struct {$/;"	t
ErrStore	admin/error.go	/^type ErrStore struct {$/;"	t
Error	admin/error.go	/^func (e ErrMissingBackends) Error() string {$/;"	f
Error	admin/error.go	/^func (e ErrMissingDataSources) Error() string {$/;"	f
Error	admin/error.go	/^func (e ErrNotFound) Error() string {$/;"	f
Error	etcd/error.go	/^func (e ErrNotFound) Error() string {$/;"	f
Error	registry/errors.go	/^func (e *ErrBackendNotExist) Error() string {$/;"	f
Error	registry/errors.go	/^func (e *ErrDuplicateBackend) Error() string {$/;"	f
Exists	registry/backend.go	/^func (r *bregistry) Exists(name string) bool {$/;"	f
FromJSON	chart.go	/^func (c *Chart) FromJSON(b []byte) error {$/;"	f
FromJSON	datasource.go	/^func (d *DataSource) FromJSON(b []byte) error {$/;"	f
GenDataSources	test/datasource.go	/^func GenDataSources(n int) []*graphx.DataSource {$/;"	f
Get	etcd/chartmap.go	/^func (m *ChartMap) Get(names []string) ([]*graphx.Chart, []string) {$/;"	f
Get	etcd/dsmap.go	/^func (m *DSMap) Get(names []string) ([]*graphx.DataSource, []string) {$/;"	f
Get	registry/backend.go	/^func (r *bregistry) Get(ds *graphx.DataSource) (graphx.Backend, error) {$/;"	f
GetCharts	test/chart.go	/^func GetCharts(n int) []*graphx.Chart {$/;"	f
List	registry/backend.go	/^func (r *bregistry) List() []string {$/;"	f
MarshalJSON	chartsdescriptor.go	/^func (cn ChartName) MarshalJSON() ([]byte, error) {$/;"	f
MarshalJSON	chartsdescriptor.go	/^func (d Duration) MarshalJSON() ([]byte, error) {$/;"	f
MarshalJSON	chartsdescriptor.go	/^func (t TimeStamp) MarshalJSON() ([]byte, error) {$/;"	f
MergeCharts	chart.go	/^func MergeCharts(charts []*Chart) (map[string][]*ChartMetric, []string) {$/;"	f
Metric	metric.go	/^type Metric struct {$/;"	t
MetricsStreamErrCode	admin/httpserv/streamhandler.go	/^	MetricsStreamErrCode = "graphx.stream_handler"$/;"	c
Name	prometheus/backend.go	/^func (b *Backend) Name() string {$/;"	f
NameTag	prometheus/sampleconv.go	/^	NameTag = "container_name"$/;"	c
New	admin/httpserv/server.go	/^func New(addr string, a *admin.Admin) *Server {$/;"	f
NewAdmin	admin/admin.go	/^func NewAdmin(dsmap *etcd.DSMap, chartmap *etcd.ChartMap, beReg registry.Backend) *Admin {$/;"	f
NewBackend	prometheus/backend.go	/^func NewBackend(ds *graphx.DataSource) (graphx.Backend, error) {$/;"	f
NewBackendReg	registry/backend.go	/^func NewBackendReg() Backend {$/;"	f
NewChartMap	etcd/chartmap.go	/^func NewChartMap(ctx context.Context, client *v3.Client) (*ChartMap, error) {$/;"	f
NewDSMap	etcd/dsmap.go	/^func NewDSMap(ctx context.Context, client *v3.Client) (*DSMap, error) {$/;"	f
NewQuerier	prometheus/querier.go	/^func NewQuerier(opts QuerierOpts) graphx.Querier {$/;"	f
NewQueryAggregator	machinery/queryaggregator.go	/^func NewQueryAggregator(queriers []graphx.Querier, interval time.Duration) *QueryAggregator {$/;"	f
ParseInt64	internal/unixtime/time.go	/^func ParseInt64(epoch int64) (time.Time, error) {$/;"	f
ParseString	internal/unixtime/time.go	/^func ParseString(epoch string) (time.Time, error) {$/;"	f
Prometheus	prometheus/backend.go	/^	Prometheus = "prometheus"$/;"	c
Querier	backend.go	/^type Querier interface {$/;"	t
Querier	prometheus/backend.go	/^func (b *Backend) Querier(metrics []*graphx.ChartMetric) graphx.Querier {$/;"	f
QuerierOpts	prometheus/querier.go	/^type QuerierOpts struct {$/;"	t
Query	prometheus/querier.go	/^func (q *querier) Query(ctx context.Context) ([]*graphx.Metric, error) {$/;"	f
QueryAggregator	machinery/queryaggregator.go	/^type QueryAggregator struct {$/;"	t
ReadBackend	admin/backend.go	/^func (a *Admin) ReadBackend() ([]string, error) {$/;"	f
ReadBackend	admin/httpserv/readbackend.go	/^func ReadBackend(admin *admin.Admin) h.HandlerFunc {$/;"	f
ReadChart	admin/chart.go	/^func (a *Admin) ReadChart() ([]*graphx.Chart, error) {$/;"	f
ReadChart	admin/httpserv/readchart.go	/^func ReadChart(admin *admin.Admin) h.HandlerFunc {$/;"	f
ReadChartsByName	admin/chart.go	/^func (a *Admin) ReadChartsByName(names []string) ([]*graphx.Chart, error) {$/;"	f
ReadDataSource	admin/datasource.go	/^func (a *Admin) ReadDataSource() ([]*graphx.DataSource, error) {$/;"	f
ReadDataSource	admin/httpserv/readdatasource.go	/^func ReadDataSource(admin *admin.Admin) h.HandlerFunc {$/;"	f
ReadDataSourcesByName	admin/datasource.go	/^func (a *Admin) ReadDataSourcesByName(names []string) ([]*graphx.DataSource, error) {$/;"	f
Recv	machinery/queryaggregator.go	/^func (qa *QueryAggregator) Recv(ctx context.Context) (*graphx.Metric, error) {$/;"	f
Register	admin/httpserv/server.go	/^func (s *Server) Register(mux *http.ServeMux) {$/;"	f
Register	registry/backend.go	/^func (r *bregistry) Register(name string, f BackendFactory) error {$/;"	f
Remove	etcd/chartmap.go	/^func (m *ChartMap) Remove(names []string) {$/;"	f
Remove	etcd/dsmap.go	/^func (m *DSMap) Remove(names []string) {$/;"	f
Reset	etcd/chartmap.go	/^func (m *ChartMap) Reset() {$/;"	f
Reset	etcd/dsmap.go	/^func (m *DSMap) Reset() {$/;"	f
Server	admin/httpserv/server.go	/^type Server struct {$/;"	t
Start	machinery/queryaggregator.go	/^func (qa *QueryAggregator) Start(ctx context.Context) {$/;"	f
Store	etcd/chartmap.go	/^func (m *ChartMap) Store(charts []*graphx.Chart) {$/;"	f
Store	etcd/dsmap.go	/^func (m *DSMap) Store(charts []*graphx.DataSource) {$/;"	f
StreamHandler	admin/httpserv/streamhandler.go	/^func StreamHandler(admin *admin.Admin, beReg registry.Backend, ws websocket.Upgrader) h.HandlerFunc {$/;"	f
Streamer	streamer.go	/^type Streamer interface {$/;"	t
StreamerFactory	streamfactory.go	/^type StreamerFactory interface {$/;"	t
TestParseString	internal/unixtime/time_test.go	/^func TestParseString(t *testing.T) {$/;"	f
TestQuery	prometheus/prometheus_integration_test.go	/^func TestQuery(t *testing.T) {$/;"	f
TestQueryRange	prometheus/prometheus_integration_test.go	/^func TestQueryRange(t *testing.T) {$/;"	f
TestQueryRangeTT	prometheus/prometheus_integration_test.go	/^var TestQueryRangeTT = []struct {$/;"	v
TestQueryStreamer	prometheus/querier_integration_test.go	/^func TestQueryStreamer(t *testing.T) {$/;"	f
TestQueryStreamerTT	prometheus/querier_integration_test.go	/^var TestQueryStreamerTT = []struct {$/;"	v
TestQueryTT	prometheus/prometheus_integration_test.go	/^var TestQueryTT = []struct {$/;"	v
Test_ChartStore_Integration_Store	etcd/chartmap_integration_test.go	/^func Test_ChartStore_Integration_Store(t *testing.T) {$/;"	f
Test_DataSourceStore_Integration_Store	etcd/dsmap_integration_test.go	/^func Test_DataSourceStore_Integration_Store(t *testing.T) {$/;"	f
TimeStamp	chartsdescriptor.go	/^type TimeStamp time.Time$/;"	t
ToJSON	chart.go	/^func (c *Chart) ToJSON() ([]byte, error) {$/;"	f
ToJSON	datasource.go	/^func (d *DataSource) ToJSON() ([]byte, error) {$/;"	f
UnitTimeTT	internal/unixtime/time_test.go	/^var UnitTimeTT = []struct {$/;"	v
UnmarshalJSON	chartsdescriptor.go	/^func (cn *ChartName) UnmarshalJSON(value []byte) error {$/;"	f
UnmarshalJSON	chartsdescriptor.go	/^func (d *Duration) UnmarshalJSON(b []byte) error {$/;"	f
UnmarshalJSON	chartsdescriptor.go	/^func (t *TimeStamp) UnmarshalJSON(b []byte) error {$/;"	f
UpdateChart	admin/chart.go	/^func (a *Admin) UpdateChart(chart *graphx.Chart) error {$/;"	f
UpdateChart	admin/httpserv/updatechart.go	/^func UpdateChart(a *admin.Admin) h.HandlerFunc {$/;"	f
UpdateDataSource	admin/datasource.go	/^func (a *Admin) UpdateDataSource(ds *graphx.DataSource) error {$/;"	f
UpdateDataSource	admin/httpserv/updatedatasource.go	/^func UpdateDataSource(a *admin.Admin) h.HandlerFunc {$/;"	f
ValidationError	admin/httpserv/streamhandler.go	/^	ValidationError      = "could not validate your charts descriptor. chart_names and names keys are required and must contain more the one item"$/;"	c
admin	admin/admin.go	/^package admin$/;"	p
admin	admin/backend.go	/^package admin$/;"	p
admin	admin/chart.go	/^package admin$/;"	p
admin	admin/datasource.go	/^package admin$/;"	p
admin	admin/error.go	/^package admin$/;"	p
adminInit	cmd/graphx/main.go	/^func adminInit(ctx context.Context, hosts string, beReg registry.Backend) (*admin.Admin, error) {$/;"	f
beRegInit	cmd/graphx/main.go	/^func beRegInit(ctx context.Context) registry.Backend {$/;"	f
bregistry	registry/backend.go	/^type bregistry struct {$/;"	t
cPrefix	etcd/client.go	/^	cPrefix          = "\/graphx\/charts"$/;"	c
cPrefixTemplate	etcd/client.go	/^	cPrefixTemplate  = "\/graphx\/charts\/%s"$/;"	c
cReduce	etcd/chartmap.go	/^var cReduce = func(m *ChartMap) events.ReduceFunc {$/;"	v
confirmChartsSeen	prometheus/querier_integration_test.go	/^func confirmChartsSeen(t *testing.T, seenMap map[graphx.ChartName]bool, charts []graphx.ChartName) {$/;"	f
confirmNamesSeen	prometheus/querier_integration_test.go	/^func confirmNamesSeen(t *testing.T, seenMap map[string]bool, Names []string) {$/;"	f
count	Makefile	/^	go test -count=1 -race -tags etcdintegration .\/...$/;"	m
datasources	admin/chart.go	/^func datasources(charts []*graphx.Chart) []string {$/;"	f
delCharts	etcd/client.go	/^func delCharts(ctx context.Context, etcd *v3.Client, names []string) error {$/;"	f
delDS	etcd/client.go	/^func delDS(ctx context.Context, etcd *v3.Client, names []string) error {$/;"	f
dsPrefix	etcd/client.go	/^	dsPrefix         = "\/graphx\/datasources"$/;"	c
dsPrefixTemplate	etcd/client.go	/^	dsPrefixTemplate = "\/graphx\/datasources\/%s"$/;"	c
dsReduce	etcd/dsmap.go	/^var dsReduce = func(m *DSMap) events.ReduceFunc {$/;"	v
etcd	etcd/chartmap.go	/^package etcd$/;"	p
etcd	etcd/chartmap_integration_test.go	/^package etcd$/;"	p
etcd	etcd/client.go	/^package etcd$/;"	p
etcd	etcd/dsmap.go	/^package etcd$/;"	p
etcd	etcd/dsmap_integration_test.go	/^package etcd$/;"	p
etcd	etcd/error.go	/^package etcd$/;"	p
graphx	backend.go	/^package graphx$/;"	p
graphx	chart.go	/^package graphx$/;"	p
graphx	chartmetric.go	/^package graphx$/;"	p
graphx	chartsdescriptor.go	/^package graphx$/;"	p
graphx	datasource.go	/^package graphx$/;"	p
graphx	metric.go	/^package graphx$/;"	p
graphx	streamer.go	/^package graphx$/;"	p
graphx	streamfactory.go	/^package graphx$/;"	p
httpserv	admin/httpserv/backendcrud.go	/^package httpserv$/;"	p
httpserv	admin/httpserv/chartcrud.go	/^package httpserv$/;"	p
httpserv	admin/httpserv/createchart.go	/^package httpserv$/;"	p
httpserv	admin/httpserv/createdatasource.go	/^package httpserv$/;"	p
httpserv	admin/httpserv/datasourcecrud.go	/^package httpserv$/;"	p
httpserv	admin/httpserv/deletechart.go	/^package httpserv$/;"	p
httpserv	admin/httpserv/deletedatasource.go	/^package httpserv$/;"	p
httpserv	admin/httpserv/readbackend.go	/^package httpserv$/;"	p
httpserv	admin/httpserv/readchart.go	/^package httpserv$/;"	p
httpserv	admin/httpserv/readdatasource.go	/^package httpserv$/;"	p
httpserv	admin/httpserv/server.go	/^package httpserv$/;"	p
httpserv	admin/httpserv/streamhandler.go	/^package httpserv$/;"	p
httpserv	admin/httpserv/updatechart.go	/^package httpserv$/;"	p
httpserv	admin/httpserv/updatedatasource.go	/^package httpserv$/;"	p
logLevel	cmd/graphx/main.go	/^func logLevel(conf Config) zerolog.Level {$/;"	f
machinery	machinery/queryaggregator.go	/^package machinery$/;"	p
main	cmd/graphx/main.go	/^func main() {$/;"	f
main	cmd/graphx/main.go	/^package main$/;"	p
names	admin/chart.go	/^func names(charts []*graphx.Chart) []string {$/;"	f
prometheus	prometheus/backend.go	/^package prometheus$/;"	p
prometheus	prometheus/prometheus_integration_test.go	/^package prometheus$/;"	p
prometheus	prometheus/querier.go	/^package prometheus$/;"	p
prometheus	prometheus/querier_integration_test.go	/^package prometheus$/;"	p
prometheus	prometheus/sampleconv.go	/^package prometheus$/;"	p
putCharts	etcd/client.go	/^func putCharts(ctx context.Context, etcd *v3.Client, charts []*graphx.Chart) error {$/;"	f
putDS	etcd/client.go	/^func putDS(ctx context.Context, etcd *v3.Client, sources []*graphx.DataSource) error {$/;"	f
querier	prometheus/querier.go	/^type querier struct {$/;"	t
query	machinery/queryaggregator.go	/^func (qa *QueryAggregator) query(ctx context.Context) {$/;"	f
query	prometheus/querier.go	/^func (q *querier) query(ctx context.Context, chartMetric *graphx.ChartMetric, eChan chan error, mChan chan *graphx.Metric, wg *sync.WaitGroup) {$/;"	f
readyTO	etcd/client.go	/^	readyTO          = 5 * time.Second$/;"	c
registry	registry/backend.go	/^package registry$/;"	p
registry	registry/errors.go	/^package registry$/;"	p
samplePairToMetric	prometheus/sampleconv.go	/^func samplePairToMetric(chart string, metric promModels.Metric, sp promModels.SamplePair) *graphx.Metric {$/;"	f
sampleToMetric	prometheus/sampleconv.go	/^func sampleToMetric(chart string, sample *promModels.Sample) *graphx.Metric {$/;"	f
setupAPI	prometheus/prometheus_integration_test.go	/^func setupAPI(t *testing.T, url string) promAPI.API {$/;"	f
signalHandler	cmd/graphx/main.go	/^func signalHandler() <-chan os.Signal {$/;"	f
start	machinery/queryaggregator.go	/^func (qa *QueryAggregator) start(ctx context.Context) {$/;"	f
test	test/chart.go	/^package test$/;"	p
test	test/datasource.go	/^package test$/;"	p
unixtime	internal/unixtime/time.go	/^package unixtime$/;"	p
unixtime	internal/unixtime/time_test.go	/^package unixtime$/;"	p
